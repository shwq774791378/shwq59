[[_moving_in_atom]]
=== Moving in Atom

While it's pretty easy to move around Atom by clicking with the mouse or using the arrow keys, there are some keybindings that may help you keep your hands on the keyboard and navigate around a little faster.

First of all, Atom ships with many of the basic Emacs keybindings for navigating a document. To go up and down a single character, you can use `ctrl-P` and `ctrl-N`. To go left and right a single character, you can use `ctrl-B` and `ctrl-F`. These are the equivalent of using the arrow keys, though some people prefer to not have to move their hands to where the arrow keys are located on their keyboard.

In addition to single character movement, there are a number of other movement keybindings.

`alt-B`, `alt-left`:: Move to beginning of word
`alt-F`, `alt-right`:: Move to end of word
`cmd-right`, `ctrl-E`:: Move to end of line
`cmd-left`, `ctrl-A`:: Move to first character of line
`cmd-up`:: Move to top of file
`cmd-down`:: Move to bottom of file

You can also move directly to a specific line (and column) number with `ctrl-G`. This will bring up a dialog that asks which line you would like to jump to. You can also use the `row:column` syntax to jump to a character in that line as well.

.Go directly to a line
image::images/goto.png[Go to line]

==== Navigating by Symbols

You can also jump around a little more informatively. To jump to a symbol such as a method definition, press `cmd-r`. This opens a list of all symbols in the current file, which you can fuzzy filter similarly to `cmd-t`. To search for symbols across your project, use `cmd-shift-r`.

.Search by symbol across your project
image::images/symbol.png[Search by symbol across your project]

You can also use `ctrl-alt-down` to jump directly to the declaration of the method or function under the cursor.

First you'll need to make sure you have `tags` (or `TAGS`) file generated for your project. This can be done by installing http://ctags.sourceforge.net[ctags] and running a command such as `ctags -R src/` from the command line in your project's root directory.

If you're on a Mac using http://brew.sh/[Homebrew], you can just run `brew install ctags`.

You can customize how tags are generated by creating your own `.ctags` file in your home directory (`~/.ctags`). An example can be found https://github.com/atom/symbols-view/blob/master/lib/.ctags[here].

The symbols navigation functionality is implemented in the https://github.com/atom/symbols-view[atom/symbols-view] package.

[[_atom_bookmarks]]
==== Atom Bookmarks

Atom also has a great way to bookmark specific lines in your project so you can jump back to them quickly.

If you press `cmd-F2`, Atom will toggle a ``bookmark'' on the current line. You can set these throughout your project and use them to quickly find and jump to important lines of your project. A small bookmark symbol is added to the line gutter, like on line 73 of <<_bookmarks_image>>.

If you hit `F2`, Atom will jump to the next bookmark in the file you currently have focused. If you use `shift-F2` it will cycle backwards through them instead.

You can also see a list of all your projects current bookmarks and quickly filter them and jump to any of them by hitting `ctrl-F2`.

[[_bookmarks_image]]
.View and filter bookmarks.
image::images/bookmarks.png[]

The bookmarks functionality is implemented in the https://github.com/atom/bookmarks[atom/bookmarks] package.

[[_atom_selections]]
=== Atom Selections

Selecting ranges of text in Atom can be useful for a number of things. It can be for scoping certain actions like deleting, searching or indenting. It can also be helpful for things like quoting or bracketing text.

Selections mirror many of the movement commands. They're actually exactly the same keybindings as the movement commands, but with a `shift` key added in.

`ctrl-shift-P`:: Select up
`ctrl-shift-N`:: Select down
`ctrl-shift-B`:: Select previous character
`ctrl-shift-F`:: Select next character
`alt-shift-B`, `alt-shift-left`:: Select to beginning of word
`alt-shift-F`, `alt-shift-right`:: Select to end of word
`ctrl-shift-E`, `cmd-shift-right`:: Select to end of line
`ctrl-shift-A`, `cmd-shift-left`:: Select to first character of line
`cmd-shift-up`:: Select to top of file
`cmd-shift-down`:: Select to bottom of file

In addition to the cursor movement selection commands, there are also a few commands that help with selecting specific areas of content.

`cmd-A`:: Select the entire buffer
`cmd-L`:: Select entire line
`ctrl-shift-W`:: Select current word

[[_working_with_text]]
=== Editing and Deleting Text

So far we've looked at a number of ways to move around and select regions of a file, so now lets actually change some of that text. Obviously you can type in order to insert characters, but there are also a number of ways to delete and manipulate text that could come in handy.

==== Basic Manipulation

There are a handful of cool keybindings for basic text manipulation that might come in handy. These range from moving around lines of text and duplicating lines to changing the case.

`ctrl-T`:: Transpose characters. This swaps the two characters on either side of the cursor.

`cmd-J`:: Join the next line to the end of the current line

`ctrl-cmd-up`, `ctrl-cmd-down`:: Move the current line up or down

`cmd-shift-D`:: Duplicate the current line

`cmd-K, cmd-U`:: Upper case the current word

`cmd-K, cmd-L`:: Lower case the current word

Atom also has built in functionality to re-flow a paragraph to hard-wrap at a given maximum line length. You can format the current selection to have lines no longer than 80 (or whatever number `editor.preferredLineLength` is set to) characters using `cmd-alt-Q`. If nothing is selected, the current paragraph will be reflowed.

==== Deleting and Cutting

You can also delete or cut text out of your buffer with some shortcuts. Be ruthless.

`ctrl-shift-K`:: Delete current line

`cmd-delete`:: Delete to end of line (`cmd-fn-backspace` on mac)

`ctrl-K`:: Cut to end of line

`cmd-backspace`:: Delete to beginning of line

`alt-backspace`, `alt-H`:: Delete to beginning of word

`alt-delete`, `alt-D`:: Delete to end of word

==== Multiple Cursors and Selections

One of the cool things that Atom can do out of the box is support multiple cursors. This can be incredibly helpful in manipulating long lists of text.

`cmd-click`:: Add new cursor

`cmd-shift-L`:: Convert a multi-line selection into multiple cursors

`ctrl-shift-up`, `ctrl-shift-up`:: Add another cursor above/below the current cursor

`cmd-D`:: Select the next word in the document that is the same as the currently selected word

`ctrl-cmd-G`:: Select all words in document that are the same as the one under the current cursor(s)

Using these commands you can place cursors in multiple places in your document and effectively execute the same commands in multiple places at once.

.Using multiple cursors
image::images/multiple-cursors.gif[using multiple cursors]

This can be incredibly helpful in doing many type of repetitive tasks such as renaming variables or changing the format of some text. You can use this with almost any plugin or command - for example, changing case and moving or duplicating lines.

You can also use the mouse to select text with the `command` key pressed down to select multiple regions of your text simultaneously.

==== Whitespace

Atom comes with a couple of tools to help you manage the whitespace in your document. These tools are implemented in the https://github.com/atom/whitespace[atom/whitespace] package.

The first is a command that converts leading spaces to tabs and the equivalent for changing tabs into spaces. If you're working with a document that has mixed whitespace, these commands can be great for helping to normalize the file. There are no keybindings for these, so you will have to search your command palette for "Convert Spaces to Tabs" (or vice versa) to run one of these commands.

The whitespace helper tools are maintained as a separate package and so the settings for it can be managed from the page for the `whitespace` package.

.Managing your whitespace settings
image::images/whitespace.png[whitespace settings]

Note that the ``Remove Trailing Whitespace'' option is on by default. This means that every time you save any file opened in Atom, it will strip all trailing whitespace from the file. If you want to disable this, go to the `whitespace` package in your settings panel and uncheck that option.

Atom will also by default ensure that your file has a trailing newline. You can also disable this option on that screen.

==== Brackets

Atom ships with intelligent and easy to use bracket handling.

It will by default highlight [], (), and {} style brackets when your cursor is over them. It will also highlight matching XML and HTML tags.

Atom will also automatically autocomplete [], (), and {}, "", '', “”, ‘’, «», ‹›, and backticks when you type the leading one. If you have a selection and you type any of these opening brackets or quotes, Atom will enclose the selection with the opening and closing brackets or quotes.

There are a few other interesting bracket related commands that you can use.

`ctrl-m`:: Jump to the bracket matching the one adjacent to the cursor. It jumps to the nearest enclosing bracket when there's no adjacent bracket.

`ctrl-cmd-m`:: Select all the text inside the current brackets

`alt-cmd-.`:: Close the current XML/HTML tag

The brackets functionality is implemented in the https://github.com/atom/bracket-matcher[atom/bracket-matcher] package. Like all of these packages, to change defaults related to brackets handling, or to disable it entirely, you can navigate to this package in the Settings view.

==== Encoding

Atom also ships with some basic file encoding support should you find yourself working with non-UTF-8 encoded files, or should you wish to create one.

`ctrl-shift-U`:: Toggle menu to change file encoding

If you pull up the file encoding dialog, you can choose an alternate file encoding to save your file in. Normally it will auto-detect the encoding if it can, otherwise it will default to UTF-8. New files will also be UTF-8 files by default.

.Changing your file encoding
image::images/encodings.png[file encodings]

If you pull up the encoding menu and change the active encoding to something else, the file will be written out in that encoding the next time that you save the file.

The encoding selector is implemented in the https://github.com/atom/encoding-selector[atom/encoding-selector] package.

[[_find_replace]]
=== Find and Replace

Finding and replacing text in your file or project is quick and easy in Atom.

`cmd-F`:: Search within a buffer

`cmd-shift-f`:: Search the entire project

If you launch either of those commands, you'll be greeted with the ``Find and Replace'' pane at the bottom of your screen.

.Find and replace text in the current file
image::images/find-replace-file.png[find and replace file]

To search within your current file you can hit `cmd-F`, type in a search string and hit enter (or `cmd-G` or the ``Find Next'' button) multiple times to cycle through all the matches in that file. There are also buttons to toggle case sensitivity, regular expression matching and selection scoping.

If you type a string in the ``Replace in current buffer'' text box, you can replace matches with a different string. For example, if you wanted to replace every instance of the string ``Scott'' with the string ``Dragon'', you would enter those values in the two text boxes and hit the ``Replace All'' button to execute the replacements.

You can also do this throughout your entire project if you invoke the panel with `cmd-shift-F`.

.Find and replace text in your project
image::images/find-replace-project.png[find and replace project]

This is a great way to find out where in your project a function is called, an anchor is linked to or a specific misspelling is located. Clicking on the matching line will jump you to that location in that file.

You can search only a subset of the files in your project by entering a link:http://en.wikipedia.org/wiki/Glob_%28programming%29[glob pattern] into the ``File/Directory pattern'' text box. When you have multiple project folders open, this feature can also be used to search in only one of those folders. For example, if you had the folders `/path1/folder1` and `/path2/folder2` open, you could enter a pattern starting with `folder1` to search only in the first folder.

Hit `escape` while focused on the Find and Replace pane to clear the pane from your workspace.

The Find and Replace functionality is implemented in the https://github.com/atom/find-and-replace[atom/find-and-replace] package and uses the https://github.com/atom/scandal[atom/scandal] package to do the actual searching.

[[_snippets]]
=== Snippets

Snippets are an incredibly powerful way to quickly generate commonly needed code syntax from a shortcut.

The idea is that you can type something like `habtm` and then hit the `tab` key and that will expand into `has_and_belongs_to_many`.

Many of the packages come bundled with their own snippets that are specific to that mode. For example, the `language-html` package that provides support for HTML syntax highlighting and grammar comes with dozens of snippets to create many of the various HTML tags you might want to use. If you create a new HTML file in Atom, you can type `html` and then hit `tab` and it will expand to:

[source,html]
----
<html>
  <head>
    <title></title>
  </head>
  <body>

  </body>
</html>
----

It will also position the cursor in the middle of the `title` tag so you can immediately start filling out the tag. Many snippets have multiple focus points that you can move through with the `tab` key as well - for instance, in the case of this HTML snippet, once you've filled out the title tag you can hit `tab` and the cursor will move to the middle of the body tag.

To see all the available snippets for the file type that you currently have open, you can type `alt-shift-S`.

.View all available snippets
image::images/snippets.png[view snippets]

You can also use fuzzy search to filter this list down by typing in the selection box. Selecting one of them will execute the snippet where your cursor is (or multiple cursors are).

==== Creating Your Own Snippets

So that's pretty cool, but what if there is something the language package didn't include or something that is custom to the code you write? Luckily it's incredibly easy to add your own snippets.

There is a text file in your `~/.atom` directory called `snippets.cson` that contains all your custom snippets that are loaded when you launch Atom. However, you can also easily open up that file by selecting the _Atom > Open Your Snippets_ menu.

There is also a directory called `~/.atom/snippets` that you can fill with multiple `json` or `cson` files in the snippets format if you want to organize your snippets in a more coherent way.

[[_snippet_format]]
===== Snippet Format

So let's look at how to write a snippet. The basic snippet format looks like this:

[source,coffee]
----
'.source.js':
  'console.log':
    'prefix': 'log'
    'body': 'console.log(${1:"crash"});$2'
----

The outermost keys are the selectors where these snippets should be active. The easiest way to determine what this should be is to go to the language package of the language you want to add a snippet for and look for the ``Scope'' string.

For example, if we wanted to add a snippet that would work for Java files, we would look up the `language-java` package in our Settings view and we can see the Scope is `source.java`. Then the top level snippet key would be that prepended by a period (like a CSS class selector would do).

.Finding the selector scope for a snippet
image::images/snippet-scope.png[snippet scope]

The next level of keys are the snippet names. These are used for describing the snippet in a more readable way in the snippet menu. It's generally best to use some sort of sort human readable string here.

Under each snippet name is a `prefix` that should trigger the snippet and a `body` to insert when the snippet is triggered.

`$` followed by a number are the tabs stops which can be cycled between by pressing `tab` once a snippet has been triggered.

The above example adds a `log` snippet to JavaScript files that would expand to.

[source,js]
----
console.log("crash");
----

The string `"crash"` would be initially selected and pressing tab again would place the cursor after the `;`

===== Multi-line Snippet Body

You can also use multi-line syntax using `"""` for larger templates:

[source,coffee]
----
'.source.js':
  'if, else if, else':
    'prefix': 'ieie'
    'body': """
      if (${1:true}) {
        $2
      } else if (${3:false}) {
        $4
      } else {
        $5
      }
    """
----

As you might expect, there is a snippet to create snippets. If you open up a snippets file and type `snip` and then hit `tab`, you will get the following text inserted:

[source,coffee]
----
'.source.js':
  'Snippet Name':
    'prefix': 'hello'
    'body': 'Hello World!'
----

Bam, just fill that bad boy out and you have yourself a snippet. As soon as you save the file, Atom should reload the snippets and you will immediately be able to try it out.

The snippets functionality is implemented in the https://github.com/atom/snippets[atom/snippets] package.

=== Autocomplete

If you're still looking to save some typing time, Atom also ships with simple autocompletion functionality.

The autocompleter lets you view and insert possible completions in the editor using `ctrl-space`.

.Autocomplete menu
image::images/autocomplete.png[autocomplete]

By default, the completer will look through the current open file for strings that match what you're starting to type.

If you want more options, in the Settings panel for the Autocomplete package you can toggle a setting to make the autocompleter look for strings in all your open buffers rather than just the current file.

For an even more powerful autocompletion solution, skip on over to the <<_autocomplete_plus>> package we cover in <<_common_packages>>.

The Autocomplete functionality is implemented in the
https://github.com/atom/autocomplete[atom/autocomplete] package.
