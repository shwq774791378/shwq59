[[_atom_folding]]
=== Folding

If you want to see an overview of the structure of the code file you're working on, folding can be a helpful tool. Folding hides blocks of code such as functions or looping blocks in order to simplify what is on your screen.

You can fold blocks of code by clicking the arrows that appear when you hover your mouse cursor over the gutter. You can also fold and unfold from the keyboard with the `alt-cmd-[` and `alt-cmd-]` keybindings.

.Code folding example
image::images/folding.png[code folding]

To fold everything, use `alt-cmd-shift-{` and to unfold everything use `alt-cmd-shift-}`. You can also fold at a specific indentation level with `cmd-k cmd-N` where N is the indentation depth.

Finally, you can fold arbitrary sections of your code or text by making a selection and then hitting `ctrl-alt-cmd-F` or choosing ``Fold Selection'' in the Command Palette.

[[_atom_panes]]
=== Panes

You can split any editor pane horizontally or vertically by using `cmd-k arrow` where the arrow is the direction to split the pane . Once you have a split pane, you can move focus between them with `cmd-k cmd-arrow` where the arrow is the direction the focus should move to.

.Multiple panes
image::images/panes.png[panes]

Each pane has it's own ``items'' or files, which are represented by tabs. You can move the files from pane to pane by dragging them with the mouse and dropping them in the pane you want that file to be in.

To close a pane, close all its editors with `cmd-w`, then press `cmd-w` one more time to close the pane. You can configure panes to auto-close when empty in the Settings view.

[[_grammar_selection]]
=== Grammar

The ``grammar'' of a buffer is what language Atom thinks that file content is. Types of grammars would be Java or Markdown. We looked at this a bit when we created some snippets in <<_snippets>>.

If you load up a file, Atom does a little work to try to figure out what type of file it is. Largely this is accomplished by looking at it's file extension (`.md` is generally a Markdown file, etc), though sometimes it has to inspect the content a bit to figure it out if it's ambiguous.

If you load up a file and Atom can't determine a grammar for the file, it will default to 'Plain Text', which is the simplest one. If it does this, if it miscategorizes a file, or if for any reason you wish to change the active grammar of a file, you can pull up the Grammar selector with `ctrl-shift-L`.

.Grammar selector
image::images/grammar.png[grammar selector]

Once the grammar of a file is changed manually, Atom will remember that until you set it back to auto-detect or choose a different grammar manually.

The Grammar selector functionality is implemented in the
https://github.com/atom/grammar-selector[atom/grammar-selector] package.
